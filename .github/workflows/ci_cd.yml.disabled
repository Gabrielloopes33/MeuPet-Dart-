name: üöÄ CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  FLUTTER_VERSION: '3.35.6'
  JAVA_VERSION: '17'

jobs:
  # Stage 1: Code Quality & Security
  quality-gate:
    name: üîç Quality Gate
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: üìö Checkout code
        uses: actions/checkout@v4

      - name: ‚òï Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: üê¶ Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.6'
          channel: 'stable'
          cache: true

      - name: üì¶ Get dependencies
        run: flutter pub get

      - name: üßπ Check code formatting
        run: dart format --output=none --set-exit-if-changed .

      - name: üîé Run static analysis
        run: flutter analyze --no-fatal-infos --no-fatal-warnings

  # Stage 2: Testing
  test-suite:
    name: üß™ Test Suite
    runs-on: ubuntu-latest
    needs: quality-gate
    timeout-minutes: 20

    steps:
      - name: üìö Checkout code
        uses: actions/checkout@v4

      - name: ‚òï Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: üê¶ Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.6'
          channel: 'stable'
          cache: true

      - name: üì¶ Get dependencies
        run: flutter pub get

      - name: üß™ Run tests
        run: flutter test

  # Stage 3: Build Android
  build-android:
    name: ü§ñ Build Android
    needs: test-suite
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: üìö Checkout code
        uses: actions/checkout@v4

      - name: ‚òï Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: üê¶ Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.6'
          channel: 'stable'
          cache: true

      - name: üì¶ Get dependencies
        run: flutter pub get

      - name: üèóÔ∏è Build Debug APK
        run: |
          flutter build apk --debug
          echo "‚úÖ Debug APK build completed"

      - name: üì¶ Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk
          path: build/app/outputs/flutter-apk/app-debug.apk
          retention-days: 7

  # Stage 4: Build Web
  build-web:
    name: üåê Build Web
    needs: test-suite
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: üìö Checkout code
        uses: actions/checkout@v4

      - name: üê¶ Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.6'
          channel: 'stable'
          cache: true

      - name: üì¶ Get dependencies
        run: flutter pub get

      - name: üåê Enable web support
        run: flutter config --enable-web

      - name: üèóÔ∏è Build web
        run: |
          flutter build web --release
          echo "‚úÖ Web build completed"

      - name: üì¶ Upload web build
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: build/web/
          retention-days: 30

  # iOS Build (separate due to macOS requirement)
  build-ios:
    name: üçé Build iOS
    needs: test-suite
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    uses: ./.github/workflows/ios.yml
    secrets: inherit

  # Stage 4: Deployment Coordination
  deploy-coordination:
    name: üöÄ Deploy Coordination
    runs-on: ubuntu-latest
    needs: [build-android, build-web, build-ios]
    if: always() && (needs.build-android.result == 'success' || needs.build-web.result == 'success')
    
    steps:
      - name: üìä Deployment Status
        run: |
          echo "## üöÄ Deployment Status Summary" >> $GITHUB_STEP_SUMMARY
          echo "### Platform Build Results:" >> $GITHUB_STEP_SUMMARY
          echo "- **Android**: ${{ needs.build-android.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Web**: ${{ needs.build-web.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **iOS**: ${{ needs.build-ios.result == 'success' && '‚úÖ Success' || '‚è≠Ô∏è Skipped' }}" >> $GITHUB_STEP_SUMMARY
          
          echo "### Deployment Targets:" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "- üåê **Web**: GitHub Pages (Live)" >> $GITHUB_STEP_SUMMARY
            echo "- ü§ñ **Android**: Internal Testing Track" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "- üåê **Web**: Firebase Hosting (Production)" >> $GITHUB_STEP_SUMMARY
            echo "- ü§ñ **Android**: Play Store Internal" >> $GITHUB_STEP_SUMMARY
            echo "- üçé **iOS**: TestFlight" >> $GITHUB_STEP_SUMMARY
          else
            echo "- üì¶ **Artifacts Only**: No deployment for this branch" >> $GITHUB_STEP_SUMMARY
          fi

  # Stage 5: Notifications
  notifications:
    name: üì¢ Notifications
    runs-on: ubuntu-latest
    needs: [quality-gate, test-suite, build-android, build-web, build-ios]
    if: always()
    
    steps:
      - name: üìä Calculate pipeline status
        id: status
        run: |
          # Determine overall status
          quality_status="${{ needs.quality-gate.result }}"
          test_status="${{ needs.test-suite.result }}"
          android_status="${{ needs.build-android.result }}"
          web_status="${{ needs.build-web.result }}"
          ios_status="${{ needs.build-ios.result }}"
          
          if [[ "$quality_status" == "success" && "$test_status" == "success" && 
                ("$android_status" == "success" || "$web_status" == "success") ]]; then
            echo "pipeline_status=success" >> $GITHUB_OUTPUT
            echo "status_icon=‚úÖ" >> $GITHUB_OUTPUT
          else
            echo "pipeline_status=failure" >> $GITHUB_OUTPUT
            echo "status_icon=‚ùå" >> $GITHUB_OUTPUT
          fi

      - name: üì¢ Slack Notification
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
        uses: 8398a7/action-slack@v3
        continue-on-error: true
        with:
          status: ${{ steps.status.outputs.pipeline_status }}
          channel: '#ci-cd'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              "attachments": [{
                "color": "${{ steps.status.outputs.pipeline_status == 'success' && 'good' || 'danger' }}",
                "title": "${{ steps.status.outputs.status_icon }} MeuPet CI/CD Pipeline",
                "fields": [
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Branch/Tag",
                    "value": "${{ github.ref_name }}",
                    "short": true
                  },
                  {
                    "title": "Status",
                    "value": "${{ steps.status.outputs.pipeline_status }}",
                    "short": true
                  },
                  {
                    "title": "Commit",
                    "value": "${{ github.sha }}",
                    "short": true
                  }
                ]
              }]
            }

      - name: üìß Email Notification (Failures)
        if: failure() && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
        uses: dawidd6/action-send-mail@v3
        continue-on-error: true
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "‚ùå MeuPet CI/CD Pipeline Failed - ${{ github.ref_name }}"
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: MeuPet CI/CD <noreply@meupet.com>
          body: |
            The CI/CD pipeline for MeuPet has failed.
            
            Repository: ${{ github.repository }}
            Branch/Tag: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            
            Please check the GitHub Actions logs for more details:
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: üìä Final Summary
        if: always()
        run: |
          echo "## üìä CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Overall Status**: ${{ steps.status.outputs.status_icon }} ${{ steps.status.outputs.pipeline_status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch/Tag**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Event**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          
          echo "### Stage Results:" >> $GITHUB_STEP_SUMMARY
          echo "- **Quality Gate**: ${{ needs.quality-gate.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Suite**: ${{ needs.test-suite.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Android Build**: ${{ needs.build-android.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Web Build**: ${{ needs.build-web.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **iOS Build**: ${{ needs.build-ios.result }}" >> $GITHUB_STEP_SUMMARY