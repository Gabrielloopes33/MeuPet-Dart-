name: 🍎 iOS Build & Deploy

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'debug'
        type: choice
        options:
        - debug
        - release

env:
  FLUTTER_VERSION: '3.35.6'

jobs:
  build-ios:
    name: 🍎 Build iOS
    runs-on: macos-latest
    timeout-minutes: 45

    steps:
      - name: 📚 Checkout code
        uses: actions/checkout@v4

      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v4
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: 📦 Get dependencies
        run: flutter pub get

      - name: 🔧 Generate code (if needed)
        run: |
          if grep -q "build_runner" pubspec.yaml; then
            flutter packages pub run build_runner build --delete-conflicting-outputs
          fi

      - name: 🛠️ Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 'latest-stable'

      - name: 🔐 Setup iOS Certificates
        if: ${{ github.event.inputs.build_type == 'release' || startsWith(github.ref, 'refs/tags/v') }}
        env:
          IOS_CERTIFICATE: ${{ secrets.IOS_CERTIFICATE }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          IOS_PROVISIONING_PROFILE: ${{ secrets.IOS_PROVISIONING_PROFILE }}
        run: |
          if [ ! -z "$IOS_CERTIFICATE" ]; then
            echo "🔐 Setting up iOS certificates..."
            
            # Create certificates directory
            mkdir -p ~/certs
            
            # Decode and save certificate
            echo "$IOS_CERTIFICATE" | base64 --decode > ~/certs/certificate.p12
            
            # Create keychain
            security create-keychain -p "" build.keychain
            security default-keychain -s build.keychain
            security unlock-keychain -p "" build.keychain
            
            # Import certificate
            security import ~/certs/certificate.p12 -k build.keychain -P "$IOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
            security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
            
            # Setup provisioning profile
            if [ ! -z "$IOS_PROVISIONING_PROFILE" ]; then
              mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
              echo "$IOS_PROVISIONING_PROFILE" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
            fi
            
            echo "✅ iOS certificates configured"
          else
            echo "ℹ️ No iOS certificates found, will build unsigned"
          fi

      - name: 🛠️ Setup CocoaPods
        run: |
          cd ios
          pod install --repo-update
          echo "✅ CocoaPods dependencies installed"

      - name: 🏗️ Build iOS (Debug)
        if: ${{ github.event.inputs.build_type == 'debug' || github.event_name == 'pull_request' }}
        run: |
          flutter build ios --debug --no-codesign --simulator
          echo "✅ iOS debug build completed"

      - name: 🏗️ Build iOS (Release)
        if: ${{ github.event.inputs.build_type == 'release' || startsWith(github.ref, 'refs/tags/v') }}
        run: |
          flutter build ios --release --no-codesign
          echo "✅ iOS release build completed"

      - name: 📦 Create iOS Archive
        if: ${{ github.event.inputs.build_type == 'release' || startsWith(github.ref, 'refs/tags/v') }}
        run: |
          cd ios
          xcodebuild -workspace Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -destination generic/platform=iOS \
            -archivePath build/Runner.xcarchive \
            archive
          echo "✅ iOS archive created"

      - name: 📦 Export IPA
        if: ${{ github.event.inputs.build_type == 'release' || startsWith(github.ref, 'refs/tags/v') }}
        run: |
          cd ios
          
          # Create export options plist
          cat > ExportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>development</string>
              <key>teamID</key>
              <string>\${{ secrets.IOS_TEAM_ID }}</string>
          </dict>
          </plist>
          EOF
          
          xcodebuild -exportArchive \
            -archivePath build/Runner.xcarchive \
            -exportOptionsPlist ExportOptions.plist \
            -exportPath build/
          
          echo "✅ IPA exported"

      - name: 📊 Build info
        run: |
          echo "## 🍎 iOS Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Flutter Version**: ${{ env.FLUTTER_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Type**: ${{ github.event.inputs.build_type || 'auto' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "ios/build/Runner.ipa" ]; then
            IPA_SIZE=$(du -h ios/build/Runner.ipa | cut -f1)
            echo "- **IPA Size**: $IPA_SIZE" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 📦 Upload iOS Archive
        if: ${{ github.event.inputs.build_type == 'release' || startsWith(github.ref, 'refs/tags/v') }}
        uses: actions/upload-artifact@v4
        with:
          name: ios-archive-${{ github.ref_name }}
          path: |
            ios/build/Runner.xcarchive
            ios/build/*.ipa
          retention-days: 30

  deploy-app-store:
    name: 🚀 Deploy to App Store
    runs-on: macos-latest
    needs: build-ios
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production

    steps:
      - name: 📚 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download iOS Archive
        uses: actions/download-artifact@v4
        with:
          name: ios-archive-${{ github.ref_name }}
          path: ./ios-build/

      - name: 🚀 Upload to TestFlight
        env:
          IOS_APP_ID: ${{ secrets.IOS_APP_ID }}
          IOS_API_KEY: ${{ secrets.IOS_API_KEY }}
          IOS_API_ISSUER: ${{ secrets.IOS_API_ISSUER }}
        run: |
          if [ ! -z "$IOS_API_KEY" ]; then
            echo "🚀 Uploading to TestFlight..."
            
            # Find the IPA file
            IPA_FILE=$(find ./ios-build -name "*.ipa" | head -1)
            
            if [ ! -z "$IPA_FILE" ]; then
              xcrun altool --upload-app \
                --type ios \
                --file "$IPA_FILE" \
                --apiKey "$IOS_API_KEY" \
                --apiIssuer "$IOS_API_ISSUER"
              
              echo "✅ App uploaded to TestFlight successfully"
            else
              echo "❌ No IPA file found"
              exit 1
            fi
          else
            echo "ℹ️ No App Store credentials found, skipping upload"
          fi

      - name: 📊 Deploy summary
        run: |
          echo "## 🚀 App Store Deploy Results" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ IPA uploaded to TestFlight" >> $GITHUB_STEP_SUMMARY
          echo "- 🔗 Check App Store Connect for processing status" >> $GITHUB_STEP_SUMMARY